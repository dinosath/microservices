apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: apicurio-registry
    component: apicurio-registry-api
  name: apicurio-registry-api
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.registry.api.replicaCount }}
  selector:
    matchLabels:
      component: apicurio-registry-api
  template:
    metadata:
      labels:
        app: apicurio-registry
        component: apicurio-registry-api
    spec:
      initContainers:
      - name: init-db
        image: postgres:latest
        env:
        - name: DB_HOST
          value: "{{ .Values.externalDatabase.host }}"
        - name: DB_PORT
          value: "{{ .Values.externalDatabase.port }}"
        - name: DB_USER
          value: "{{ .Values.externalDatabase.username }}"
        - name: DB_PASSWORD
          value: "{{ .Values.externalDatabase.password }}"
        - name: DB_NAME
          value: "{{ .Values.externalDatabase.database }}"
        command: ["/bin/sh", "-c"]
        args:
        - |
          until PGPASSWORD=$DB_PASSWORD pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

          if PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
            echo "Database $DB_NAME already exists."
          else
            echo "Creating database $DB_NAME..."
            PGPASSWORD=$DB_PASSWORD createdb -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME
          fi

      containers:
      - image: quay.io/apicurio/apicurio-registry-sql:2.5.8.Final
        name: apicurio-registry-api
        ports:
          - name: web
            containerPort: 8080
            protocol: TCP
        envFrom:
          - configMapRef:
              name: registry-config
        resources:
{{ toYaml .Values.registry.api.resources | indent 10 }}
        livenessProbe:
          httpGet:
            path: /apis/registry/v2/system/info
            port: 8080
            scheme: HTTP
{{ toYaml .Values.registry.api.livenessProbe | indent 12 }}
        readinessProbe:
          httpGet:
            path: /apis/registry/v2/system/info
            port: 8080
            scheme: HTTP
{{ toYaml .Values.registry.api.readinessProbe | indent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: apicurio-registry
    template: apicurio-registry-api
  name: apicurio-registry-api
spec:
  selector:
    component: apicurio-registry-api
  ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
  type: ClusterIP
---
{{- if .Values.registry.api.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: apicurio-registry
    template: apicurio-registry-api
  name: apicurio-registry-api
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: {{ .Values.registry.api.ingress.host }}
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: apicurio-registry-api
                port:
                  number: 8080
{{- end }}