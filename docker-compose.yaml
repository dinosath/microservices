version: "3.8"
services:

  #apicurio-registry
  apicurio-registry:
    image: 'apicurio/apicurio-registry-sql:latest-release'
    ports:
      - '8090:8080'
    environment:
      AUTH_ENABLED: false
      KEYCLOAK_URL: http://localhost:8081
      KEYCLOAK_REALM: registry
      KEYCLOAK_API_CLIENT_ID: registry-api
      KEYCLOAK_UI_CLIENT_ID: apicurio-registry
      REGISTRY_DATASOURCE_URL: jdbc:postgresql://postgres/apicurio-registry
      REGISTRY_DATASOURCE_USERNAME: postgres
      REGISTRY_DATASOURCE_PASSWORD: postgres123!
      REGISTRY_EVENTS_KAFKA_TOPIC: apicurio-registry-events
      KAFKA_BOOTSTRAP_SERVERS: redpanda:29092
    depends_on:
      - postgres

  redpanda:
    image: docker.redpanda.com/vectorized/redpanda:v22.2.2
    command:
      - redpanda start
      - --overprovisioned
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - 8083:8081
      - 8084:8082
      - 9092:9092
      - 9644:9644
      - 29092:29092

  console:
    image: docker.redpanda.com/vectorized/console:latest
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8085:8080
    depends_on:
      - redpanda


#  connect:
#    image: docker.cloudsmith.io/redpanda/connectors/connectors:624ff9e
#    hostname: connect
#    container_name: connect
#    depends_on:
#      - redpanda
#    ports:
#      - "8086:8083"
#    environment:
#      KAFKA_CONNECT_CONFIGURATION: |
#        offset.storage.topic=docker-connect-offsets
#        value.converter=org.apache.kafka.connect.json.JsonConverter
#        config.storage.topic=docker-connect-configs
#        key.converter=org.apache.kafka.connect.json.JsonConverter
#        group.id=compose-connect-group
#        status.storage.topic=docker-connect-status
#        config.storage.replication.factor=1
#        offset.storage.replication.factor=1
#        status.storage.replication.factor=1
#      KAFKA_CONNECT_METRICS_ENABLED: "false"
#      KAFKA_CONNECT_BOOTSTRAP_SERVERS: redpanda:29092
#      KAFKA_GC_LOG_ENABLED: "false"
#      KAFKA_HEAP_OPTS: -Xms128M


  #keycloak
#  keycloak:
#    image: quay.io/keycloak/keycloak
#    command: start-dev
#    environment:
#        KC_HOSTNAME_STRICT: false
#        KEYCLOAK_ADMIN: admin
#        KEYCLOAK_ADMIN_PASSWORD: admin
#        KC_DB_USERNAME: postgres
#        KC_DB_PASSWORD: postgres123!
#        KEYCLOAK_DATASOURCE_URL: jdbc:postgresql://postgres/keycloak
#        TZ: UTC
#    ports:
#        - 8081:8080
#    depends_on:
#        - postgres

  #postgres
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123!
    ports:
      - '5432:5432'
    volumes:
      - /data/postgres:/var/lib/postgresql/data

  #pgadmin
#  pgadmin:
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@pgadmin.org}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#    ports:
#      - "${PGADMIN_PORT:-8089}:80"
#    depends_on:
#      - postgres

  # Jaeger
#  jaeger:
#    image: jaegertracing/all-in-one:latest
#    ports:
#      - "16686:16686"
#      - "14268"
#      - "14250"
#    environment:
#      - COLLECTOR_OTLP_ENABLED=true

      # openapi-generator
  openapi-generator:
    image: openapitools/openapi-generator-online
    ports:
    - "8088:8080"


  # Zipkin
#  zipkin:
#    image: openzipkin/zipkin:latest
#    ports:
#      - "9411:9411"

  # Collector
#  otel-collector:
#    image: otel/opentelemetry-collector
#    command:
#      - "--config=/etc/otel-collector-config.yaml"
#    volumes:
#      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
#    ports:
#      - "1888:1888"   # pprof extension
#      - "8888:8888"   # Prometheus metrics exposed by the collector
#      - "8889:8889"   # Prometheus exporter metrics
#      - "13133:13133" # health_check extension
#      - "4317:4317"   # OTLP gRPC receiver
#      - "55679:55679" # zpages extension
#    depends_on:
#      - jaeger
#      - zipkin

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    volumes:
#      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
