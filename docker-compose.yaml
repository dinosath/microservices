version: "3.8"
services:
  #apicurio-registry
  apicurio-registry:
    container_name: apicurio-registry
    image: 'apicurio/apicurio-registry-sql:latest-release'
    ports:
      - '8090:8080'
    environment:
      AUTH_ENABLED: "false"
      KEYCLOAK_URL: http://localhost:8081
      KEYCLOAK_REALM: registry
      KEYCLOAK_API_CLIENT_ID: registry-api
      KEYCLOAK_UI_CLIENT_ID: apicurio-registry
      REGISTRY_DATASOURCE_URL: jdbc:postgresql://postgres/apicurio-registry
      REGISTRY_DATASOURCE_USERNAME: postgres
      REGISTRY_DATASOURCE_PASSWORD: postgres123!
      REGISTRY_EVENTS_KAFKA_TOPIC: apicurio-registry-events
      KAFKA_BOOTSTRAP_SERVERS: redpanda:29092
    depends_on:
      - postgres
    networks:
      - microservices

  redpanda:
    image: docker.redpanda.com/vectorized/redpanda:v22.2.2
    container_name: redpanda
    command:
      - redpanda start
      - --overprovisioned
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - 8083:8081
      - 8084:8082
      - 9092:9092
      - 9644:9644
      - 29092:29092
    networks:
      - microservices
#    volumes:
#      - redpanda:/var/lib/redpanda/data

  console:
    container_name: redpanda-console
    image: docker.redpanda.com/vectorized/console:latest
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8085:8080
    depends_on:
      - redpanda
    networks:
      - microservices

  #keycloak
  keycloak:
    image: quay.io/keycloak/keycloak
    command: start-dev
    environment:
        KC_HOSTNAME_STRICT: false
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_DB_USERNAME: postgres
        KC_DB_PASSWORD: postgres123!
        KEYCLOAK_DATASOURCE_URL: jdbc:postgresql://postgres/keycloak
        TZ: UTC
    ports:
        - 8081:8080
    depends_on:
        - postgres
    networks:
        - microservices

  #postgres
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123!
    ports:
      - '5432:5432'
    volumes:
      - /data/postgres:/var/lib/postgresql/data
    networks:
      - microservices

  #pgadmin
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-8089}:80"
    networks:
      - microservices
    depends_on:
      - postgres

      # openapi-generator
  # openapi-generator:
  #   image: openapitools/openapi-generator-online
  #   ports:
  #   - "8088:8080"
  #
  # mongo:
  #     image: mongo:latest
  #     ports:
  #         - 27017:27017
  #     volumes:
  #         - mongo_data:/data/db

  # Zipkin
  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"

  # Collector
  otel-collector:
    image: otel/opentelemetry-collector
    command:
      - "--config=/etc/otel-collector-config.yaml"
    volumes:
      - ./docker/compose/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
      - zipkin

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.0-alpine
    restart: always
    volumes:
    - ./docker/compose/dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
    - "9000:9000"
    networks:
      - microservices

  apisix:
    image: apache/apisix:3.2.0-debian
    restart: always
    volumes:
      - ./docker/compose/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ##network_mode: host
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9093:9092/tcp"
    networks:
      - microservices

  etcd:
    image: bitnami/etcd:3.4.15
    restart: always
    volumes:
      - etcd_data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      - microservices

  web1:
    image: nginx:1.19.0-alpine
    restart: always
    volumes:
      - ./docker/compose/upstream/web1.conf:/etc/nginx/nginx.conf
    ports:
      - "9081:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      - microservices

  web2:
    image: nginx:1.19.0-alpine
    restart: always
    volumes:
      - ./docker/compose/upstream/web2.conf:/etc/nginx/nginx.conf
    ports:
      - "9082:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      - microservices

  prometheus:
    image: prom/prometheus:v2.43.0
    restart: always
    volumes:
      - ./docker/compose/prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices

  grafana:
    image: grafana/grafana:main
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - "./docker/compose/grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./docker/compose/grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./docker/compose/grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
    networks:
      - microservices

networks:
  microservices:
    driver: bridge

volumes:
    etcd_data:
      driver: local
    mongo_data:
        driver: local
    eventstore_data:
        driver: local
    redpanda: null
